package com.payneteasy.srvlog.adapter.syslog;

import com.payneteasy.srvlog.data.UnprocessedSnortLogData;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import static java.util.TimeZone.getTimeZone;
import jregex.Matcher;
import jregex.Pattern;

/**
 * Object representation of raw message from barnyard2 syslog_full output plugin.
 *
 * @author imenem
 */
public class RawSnortMessage {

    /**
     * Regular expression to parse message.
     */
    private static final Pattern MESSAGE_REGEX = new Pattern(
        "SNORTIDS\\[LOG\\]:.+?" +
        "({DATE}\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}.\\d{3})" +
        " \\d{1,4} " +
        "({IDENTIFIER}\\[\\d+:\\d+:\\d+\\])"
    );

    /**
     * Returns true, if message generated by snort.
     *
     * @param       rawMessage      Message to check.
     *
     * @return      True, if message generated by snort.
     */
    public static boolean isMessageFromSnort(String rawMessage) {
        return MESSAGE_REGEX.matcher(rawMessage).find();
    }

    /**
     * Parses message from barnyard2 syslog_full output plugin.
     *
     * @param       rawSnortMessage     Message from barnyard2.
     *
     * @return      Object representation of message.
     */
    public static RawSnortMessage createRawSnortMessage(String rawSnortMessage) {
        RawSnortMessage snortMessage = new RawSnortMessage();

        Matcher matcher = MESSAGE_REGEX.matcher(rawSnortMessage);

        if (!matcher.find()) {
            throw new RuntimeException(
                "Message does not look like message from Snort. " +
                "Check message with method isMessageFromSnort() first."
            );
        }

        snortMessage.setDate(matcher.group("DATE"));
        snortMessage.identifier = matcher.group("IDENTIFIER");
        snortMessage.message = rawSnortMessage;

        return snortMessage;
    }

    /**
     * Date and time parser.
     * Uses UTC time zone.
     *
     * {@link DateFormat} isn't thread safe, so we must create
     * own instance of {@link DateFormat} for each {@link SnortMessage} object.
     */
    private final DateFormat dateParser;

    /**
     * Date and time, when message generated.
     */
    private Date date;

    /**
     * Snort signature created for this message.
     * Identifier contains generator id, rule id and rule version.
     */
    private String identifier;

    /**
     * Raw message from barnyard2 syslog_full output plugin.
     */
    private String message;

    public RawSnortMessage() {
        dateParser = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S");
        dateParser.setTimeZone(getTimeZone("UTC"));
    }

    /**
     * Converts object to data transfer object.
     *
     * @return      Data transfer object.
     */
    public UnprocessedSnortLogData toUnprocessedSnortLogData() {
        UnprocessedSnortLogData unprocessedSnortLogData = new UnprocessedSnortLogData();

        unprocessedSnortLogData.setDate(date);
        unprocessedSnortLogData.setIdentifier(identifier);
        unprocessedSnortLogData.setMessage(message);

        return unprocessedSnortLogData;
    }

    /**
     * Converts date from string to object and assigns it to object field.
     *
     * @param       date        Date and time, when message generated in string form.
     */
    private void setDate(String date) {
        try {
            this.date = dateParser.parse(date);
        }
        catch (ParseException ex) {
            throw new RuntimeException(ex);
        }
    }

}
