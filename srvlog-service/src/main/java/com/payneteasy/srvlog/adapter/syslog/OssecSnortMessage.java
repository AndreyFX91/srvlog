package com.payneteasy.srvlog.adapter.syslog;

import static com.google.common.hash.Hashing.md5;
import com.nesscomputing.syslog4j.server.SyslogServerEventIF;
import static java.nio.charset.StandardCharsets.UTF_8;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import jregex.Matcher;
import jregex.Pattern;
import org.joda.time.DateTime;

/**
 * Object representation of snort message, processed by ossec.
 *
 * @author imenem
 */
public class OssecSnortMessage {

    /**
     * Regular expression to parse message.
     */
    private final static Pattern MESSAGE_REGEX = new Pattern(
        "({DATE}[A-Z][a-z]{2} +\\d{1,2} \\d{1,2}:\\d{2}:\\d{2})" +
        ".+? ossec: Alert Level:.+?" +
        "snort\\[\\d+\\]: " +
        "({IDENTIFIER}\\[\\d+:\\d+:\\d+\\])"
    );

    /**
     * Return true, if message generated by ossec and contains message from snort.
     *
     * @param       rawMessage      Message to ckeck.
     *
     * @return      True, if message generated by ossec and contains message from snort.
     */
    public static boolean isSnortMessageFromOssec(String rawMessage) {
        return MESSAGE_REGEX.matcher(rawMessage).find();
    }

    /**
     * Parses message generated by ossec and contains message from snort.
     *
     * @param       rawMessage      Message to parse.
     *
     * @return      Object representation of snort message, processed by ossec.
     */
    public static OssecSnortMessage createOssecSnortMessage(String rawMessage) {
        OssecSnortMessage snortMessage = new OssecSnortMessage();

        Matcher matcher = MESSAGE_REGEX.matcher(rawMessage);

        if (!matcher.find()) {
            throw new RuntimeException(
                "Message does not look like message from Ossec with snort alert. " +
                "Check message with method isSnortMessageFromOssec() first."
            );
        }

        snortMessage.setDate(matcher.group("DATE"));
        snortMessage.identifier = matcher.group("IDENTIFIER");
        snortMessage.hash = md5().hashString(rawMessage, UTF_8).toString();

        return snortMessage;
    }

    /**
     * Return raw message string from syslog server event.
     *
     * @param       event       Syslog server event.
     *
     * @return      Raw message from event.
     */
    public static String getRawMessage(SyslogServerEventIF event) {
        return new String(event.getRaw()).replaceFirst("^<\\d+>", "");
    }

    /**
     * Date and time parser.
     *
     * {@link DateFormat} isn't thread safe, so we must create
     * own instance of {@link DateFormat} for each {@link SnortMessage} object.
     */
    private final DateFormat dateParser = new SimpleDateFormat("yyyy MMM d HH:mm:ss");

    /**
     * Date and time, when ossec finished incoming messages collecting and generated this message.
     */
    private DateTime dateTo;

    /**
     * Date and time, when ossec possibly started incoming messages collecting.
     */
    private DateTime dateFrom;

    /**
     * Message identifier, generated by snort.
     */
    private String identifier;

    /**
     * Original ossec message hash.
     */
    private String hash;

    /**
     * Returns message identifier, generated by snort.
     *
     * @return      Message identifier.
     */
    public String getIdentifier() {
        return identifier;
    }

    /**
     * Returns original ossec message hash.
     *
     * @return      Message hash.
     */
    public String getHash() {
        return hash;
    }

    public Date getDateTo() {
        return dateTo.toDate();
    }

    public Date getDateFrom() {
        return dateFrom.toDate();
    }

    /**
     * Converts date from string to object and assigns it to object field.
     *
     * @param       date        Date and time, when message generated in string form.
     */
    private void setDate(String dateString) {
        // Date has no year, so we must set in here.
        String fullDate = new DateTime().getYear() + " " + dateString.replaceAll(" +", " ");

        try {
            DateTime creationDate = new DateTime(dateParser.parse(fullDate));

            dateTo = creationDate.plusMinutes(1);
            dateFrom = dateTo.minusMinutes(5);
        } catch (ParseException ex) {
            throw new RuntimeException(ex);
        }
    }

}
